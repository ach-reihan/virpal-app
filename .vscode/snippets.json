{
  "React Functional Component with TypeScript": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:// Define props here}",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ ${3:props} }) => {",
      "  return (",
      "    <div className=\"${4:container}\">",
      "      ${5:// Component content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a React functional component with TypeScript"
  },
  "Azure Function with TypeScript": {
    "prefix": "azfunc",
    "body": [
      "import { app, HttpRequest, HttpResponseInit, InvocationContext } from '@azure/functions';",
      "",
      "export async function ${1:functionName}(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {",
      "  context.log(`${1:functionName} function processed request for url \"${request.url}\"`);",
      "",
      "  try {",
      "    ${2:// Function logic here}",
      "",
      "    return {",
      "      status: 200,",
      "      jsonBody: {",
      "        message: '${3:Success message}'",
      "      }",
      "    };",
      "  } catch (error) {",
      "    context.log.error('Error in ${1:functionName}:', error);",
      "    return {",
      "      status: 500,",
      "      jsonBody: {",
      "        error: 'Internal server error'",
      "      }",
      "    };",
      "  }",
      "}",
      "",
      "app.http('${1:functionName}', {",
      "  methods: ['GET', 'POST'],",
      "  authLevel: 'anonymous',",
      "  handler: ${1:functionName}",
      "});"
    ],
    "description": "Create an Azure Function with TypeScript"
  },
  "Custom Hook with TypeScript": {
    "prefix": "hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "interface Use${1:HookName}Return {",
      "  ${2:data}: ${3:any};",
      "  ${4:loading}: boolean;",
      "  ${5:error}: string | null;",
      "}",
      "",
      "export const use${1:HookName} = (${6:params}): Use${1:HookName}Return => {",
      "  const [${2:data}, set${2/(.*)/${1:/capitalize}/}] = useState<${3:any}>(${7:null});",
      "  const [${4:loading}, set${4/(.*)/${1:/capitalize}/}] = useState<boolean>(false);",
      "  const [${5:error}, set${5/(.*)/${1:/capitalize}/}] = useState<string | null>(null);",
      "",
      "  useEffect(() => {",
      "    ${8:// Hook logic here}",
      "  }, [${9:dependencies}]);",
      "",
      "  return {",
      "    ${2:data},",
      "    ${4:loading},",
      "    ${5:error}",
      "  };",
      "};"
    ],
    "description": "Create a custom React hook with TypeScript"
  },
  "TailwindCSS Component": {
    "prefix": "twcomp",
    "body": [
      "import React from 'react';",
      "import { cn } from '@/utils/cn';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  ${2:// Add more props}",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ className, ${3:...props} }) => {",
      "  return (",
      "    <div",
      "      className={cn(",
      "        '${4:default-classes}',",
      "        className",
      "      )}",
      "      ${3:...props}",
      "    >",
      "      ${5:// Component content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a component with TailwindCSS"
  },
  "Service Class with Azure Integration": {
    "prefix": "service",
    "body": [
      "import { ${1:requiredImports} } from '${2:importPath}';",
      "",
      "export class ${3:ServiceName}Service {",
      "  private static instance: ${3:ServiceName}Service;",
      "",
      "  private constructor() {",
      "    ${4:// Initialize service}",
      "  }",
      "",
      "  public static getInstance(): ${3:ServiceName}Service {",
      "    if (!${3:ServiceName}Service.instance) {",
      "      ${3:ServiceName}Service.instance = new ${3:ServiceName}Service();",
      "    }",
      "    return ${3:ServiceName}Service.instance;",
      "  }",
      "",
      "  public async ${5:methodName}(${6:params}): Promise<${7:ReturnType}> {",
      "    try {",
      "      ${8:// Method implementation}",
      "    } catch (error) {",
      "      console.error('Error in ${3:ServiceName}Service.${5:methodName}:', error);",
      "      throw error;",
      "    }",
      "  }",
      "}"
    ],
    "description": "Create a service class with Azure integration pattern"
  }
}
