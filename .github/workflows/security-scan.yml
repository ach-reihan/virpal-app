name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies-only
          - code-only
          - secrets-only
  pull_request:
    paths:
      - 'package*.json'
      - 'src/**'
      - '.github/workflows/**'
      - 'host.json'
      - 'local.settings.json'

env:
  NODE_VERSION: '20'
  TRIVY_SEVERITY: 'CRITICAL,HIGH,MEDIUM'
  FAIL_ON_CRITICAL: 'true'
  FAIL_ON_HIGH: 'true'

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write # For commenting on PRs

jobs:
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies-only' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit (JSON output)
        run: npm audit --audit-level=moderate --json > audit-results.json
        continue-on-error: true

      - name: Run npm audit (human readable)
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results-${{ github.run_id }}
          path: audit-results.json
          retention-days: 30

      - name: Check for vulnerabilities with detailed reporting
        run: |
          echo "🔍 Analyzing npm audit results..."

          if [ ! -f audit-results.json ]; then
            echo "❌ Audit results file not found"
            exit 1
          fi

          # Parse audit results with better error handling
          AUDIT_DATA=$(cat audit-results.json)

          # Check if audit results contain vulnerabilities metadata
          if echo "$AUDIT_DATA" | jq -e '.metadata' > /dev/null 2>&1; then
            CRITICAL_VULN=$(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.critical // 0')
            HIGH_VULN=$(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.high // 0')
            MODERATE_VULN=$(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.moderate // 0')
            LOW_VULN=$(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.low // 0')

            echo "📊 Vulnerability Summary:"
            echo "  🔴 Critical: $CRITICAL_VULN"
            echo "  🟠 High: $HIGH_VULN"
            echo "  🟡 Moderate: $MODERATE_VULN"
            echo "  🟢 Low: $LOW_VULN"

            # Set outputs for other jobs
            echo "critical-vulns=$CRITICAL_VULN" >> $GITHUB_OUTPUT
            echo "high-vulns=$HIGH_VULN" >> $GITHUB_OUTPUT
            echo "moderate-vulns=$MODERATE_VULN" >> $GITHUB_OUTPUT

            # Fail based on severity thresholds
            if [ "$CRITICAL_VULN" -gt 0 ]; then
              echo "❌ FAILED: Found $CRITICAL_VULN critical vulnerability(s)"
              if [ "${{ env.FAIL_ON_CRITICAL }}" = "true" ]; then
                exit 1
              fi
            fi

            if [ "$HIGH_VULN" -gt 0 ]; then
              echo "⚠️ WARNING: Found $HIGH_VULN high severity vulnerability(s)"
              if [ "${{ env.FAIL_ON_HIGH }}" = "true" ]; then
                exit 1
              fi
            fi

            if [ "$CRITICAL_VULN" -eq 0 ] && [ "$HIGH_VULN" -eq 0 ]; then
              echo "✅ No critical or high severity vulnerabilities found"
            fi
          else
            echo "✅ No vulnerabilities detected or audit completed successfully"
          fi

      - name: Generate dependency report
        run: |
          echo "📋 Generating dependency security report..."
          AUDIT_DATA=$(cat audit-results.json 2>/dev/null || echo '{}')

          cat > dependency-security-report.md << 'EOF'
          # Dependency Security Report

          **Scan Date:** $(date -Iseconds)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}

          ## Summary
          - Critical Vulnerabilities: $(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
          - High Vulnerabilities: $(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
          - Moderate Vulnerabilities: $(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.moderate // 0' 2>/dev/null || echo "0")
          - Low Vulnerabilities: $(echo "$AUDIT_DATA" | jq '.metadata.vulnerabilities.low // 0' 2>/dev/null || echo "0")

          ## Recommendations
          - Run \`npm audit fix\` to automatically fix vulnerabilities
          - Review and update dependencies regularly
          - Consider using \`npm audit fix --force\` for major version updates (with caution)
          - Monitor security advisories for your dependencies
          EOF

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-report-${{ github.run_id }}
          path: dependency-security-report.md
          retention-days: 30
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code-only' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: true
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name != 'pull_request'
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-security-scan'

      - name: Comment scan results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const sarif = JSON.parse(fs.readFileSync('trivy-results.sarif', 'utf8'));
              const runs = sarif.runs || [];
              const totalIssues = runs.reduce((sum, run) => sum + (run.results?.length || 0), 0);

              const comment = `## 🔍 Security Scan Results

              **Trivy Security Scan Completed**
              - **Total Issues Found:** ${totalIssues}
              - **Scan Status:** ${totalIssues > 0 ? '⚠️ Issues found' : '✅ No issues'}

              ${totalIssues > 0 ? 'Please review the security findings in the workflow logs.' : 'No security vulnerabilities detected.'}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not parse SARIF file:', error);
            }

      - name: Analyze Trivy results
        run: |
          echo "🔍 Analyzing Trivy security scan results..."

          if [ -f "trivy-results.sarif" ]; then
            # Count vulnerabilities by severity
            CRITICAL_COUNT=$(jq '[.runs[].results[]? | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.runs[].results[]? | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")

            echo "📊 Trivy Scan Results:"
            echo "  🔴 Critical/Error: $CRITICAL_COUNT"
            echo "  🟠 High/Warning: $HIGH_COUNT"

            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Critical security issues found in codebase"
              echo "Review the Security tab for detailed information"
            fi

            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "⚠️ High severity security issues found"
              echo "Consider addressing these issues"
            fi

            if [ "$CRITICAL_COUNT" -eq 0 ] && [ "$HIGH_COUNT" -eq 0 ]; then
              echo "✅ No critical or high severity issues found by Trivy"
            fi
          else
            echo "⚠️ Trivy results file not found"
          fi

      - name: Run Semgrep security scan (optional)
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/react
            p/nodejs
        continue-on-error: true

      - name: Upload Semgrep results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('semgrep.sarif') != ''
        with:
          sarif_file: semgrep.sarif
          category: 'semgrep-security-scan'

      - name: Upload security scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.run_id }}
          path: |
            trivy-results.sarif
            semgrep.sarif
          retention-days: 30

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets-only' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --no-update
        continue-on-error: true

      - name: Run GitLeaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check for Azure-specific secrets
        run: |
          echo "🔍 Scanning for Azure-specific secret patterns..."

          # Define Azure secret patterns
          PATTERNS=(
            "AZURE_CLIENT_SECRET"
            "AZURE_CLIENT_ID"
            "AZURE_TENANT_ID"
            "AZURE_SUBSCRIPTION_ID"
            "DefaultEndpointsProtocol=https;AccountName="
            "SharedAccessSignature="
            "sv=.*sig="
            "BlobEndpoint=https://.*core.windows.net"
          )

          FOUND_SECRETS=false

          for pattern in "${PATTERNS[@]}"; do
            if grep -r "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.log" >/dev/null 2>&1; then
              echo "⚠️ Potential Azure secret pattern found: $pattern"
              FOUND_SECRETS=true
            fi
          done

          if [ "$FOUND_SECRETS" = true ]; then
            echo "❌ Potential secrets detected. Please review and move to Azure Key Vault."
            echo "💡 Tip: Use environment variables and Azure Managed Identity instead of hardcoded secrets."
          else
            echo "✅ No obvious Azure secret patterns detected"
          fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security-scan, secrets-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: Generate security summary
        run: |
          echo "# 🛡️ Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "**Scan Date:** $(date -Iseconds)" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Job Results" >> security-summary.md
          echo "- **Dependency Check:** ${{ needs.dependency-check.result }}" >> security-summary.md
          echo "- **Code Security Scan:** ${{ needs.code-security-scan.result }}" >> security-summary.md
          echo "- **Secrets Detection:** ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Recommendations" >> security-summary.md
          echo "1. 🔄 **Regular Updates:** Keep dependencies updated to latest secure versions" >> security-summary.md
          echo "2. 🔐 **Secret Management:** Use Azure Key Vault for all secrets and credentials" >> security-summary.md
          echo "3. 🛡️ **Code Reviews:** Implement security-focused code reviews" >> security-summary.md
          echo "4. 📊 **Monitoring:** Set up continuous security monitoring" >> security-summary.md
          echo "5. 🎯 **Least Privilege:** Apply principle of least privilege for all access" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Azure Security Best Practices" >> security-summary.md
          echo "- ✅ Use Managed Identity for Azure service authentication" >> security-summary.md
          echo "- ✅ Enable Azure Defender for Cloud for runtime protection" >> security-summary.md
          echo "- ✅ Implement Azure Policy for compliance enforcement" >> security-summary.md
          echo "- ✅ Use Azure Monitor and Application Insights for security monitoring" >> security-summary.md
          echo "- ✅ Enable audit logging for all Azure resources" >> security-summary.md

          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-${{ github.run_id }}
          path: security-summary.md
          retention-days: 90

      - name: Comment on PR (if applicable)
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
