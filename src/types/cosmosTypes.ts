/**
 * VirPal App - AI Assistant with Azure Functions
 * Copyright (c) 2025 Achmad Reihan Alfaiz. All rights reserved.
 *
 * This file is part of VirPal App, a proprietary software application.
 *
 * PROPRIETARY AND CONFIDENTIAL
 *
 * This source code is the exclusive property of Achmad Reihan Alfaiz.
 * No part of this software may be reproduced, distributed, or transmitted
 * in any form or by any means, including photocopying, recording, or other
 * electronic or mechanical methods, without the prior written permission
 * of the copyright holder, except in the case of brief quotations embodied
 * in critical reviews and certain other noncommercial uses permitted by
 * copyright law.
 *
 * For licensing inquiries: reihan3000@gmail.com
 */

/**
 * Azure Cosmos DB Entity Types for VIRPAL Application
 * Defines the data structures for all containers in the virpal-db database:
 * - users: User profiles and authentication data (partition key: /id, unique key: /email)
 * - conversations: Chat sessions and metadata (partition key: /userId)
 * - messages: Individual chat messages within conversations (partition key: /conversationId)
 * - analytics: Usage analytics and metrics data (partition key: /date)
 *
 * Best Practices Applied:
 * - Strong typing for all entities
 * - Consistent naming conventions
 * - Partition key optimization
 * - Extensible interface design
 */

/**
 * Base interface for all Cosmos DB entities
 * Includes common fields required by Cosmos DB
 */
export interface CosmosDbEntity {
  id: string; // Unique identifier for the document
  _rid?: string; // Resource ID (auto-generated by Cosmos DB)
  _self?: string; // Self-link (auto-generated by Cosmos DB)
  _etag?: string; // ETag for optimistic concurrency (auto-generated)
  _attachments?: string; // Attachments link (auto-generated)
  _ts?: number; // Timestamp (auto-generated)
  ttl?: number; // Time to live in seconds (optional)
}

/**
 * User entity for the 'users' container
 * Stores user profiles and authentication-related data
 * Partition Key: /id, Unique Key: /email
 * Computed Properties: fullName, isPremium
 */
export interface UserEntity extends CosmosDbEntity {
  id: string; // User ID (partition key)
  email: string; // User email address (unique key)
  displayName: string; // User's display name
  firstName?: string; // First name for fullName computation
  lastName?: string; // Last name for fullName computation
  subscriptionTier: 'free' | 'premium' | 'elite'; // Subscription level
  preferences?: {
    // User preferences (excluded from indexing)
    language?: string; // Preferred language
    theme?: 'light' | 'dark'; // UI theme preference
    notifications?: boolean; // Notification preferences
    voiceSettings?: {
      // TTS voice settings
      voice?: string;
      speed?: number;
      pitch?: number;
    };
  };
  createdAt: string; // Account creation timestamp (ISO string)
  updatedAt: string; // Last update timestamp (ISO string)
  lastLoginAt?: string; // Last login timestamp (ISO string)
  // Computed properties (calculated by Cosmos DB)
  fullName?: string; // CONCAT(firstName, ' ', lastName)
  isPremium?: boolean; // subscriptionTier = 'premium' OR 'elite'
}

/**
 * Conversation entity for the 'conversations' container
 * Stores chat session metadata and summaries
 * Partition Key: /userId
 * Computed Properties: messageCount, isActive
 */
export interface ConversationEntity extends CosmosDbEntity {
  id: string; // Unique conversation ID
  userId: string; // User ID (partition key)
  title: string; // Conversation title
  summary?: string; // AI-generated conversation summary
  messageCount: number; // Total message count
  date: string; // Date string for indexing (YYYY-MM-DD)
  timestamp: string; // Full timestamp (ISO string)
  createdAt: string; // Conversation start timestamp (ISO string)
  updatedAt: string; // Last update timestamp (ISO string)
  lastActivityTimestamp: string; // Last activity timestamp (ISO string)
  expiryThreshold?: string; // For computed property isActive
  metadata?: {
    tags?: string[]; // Conversation tags for categorization
    category?: string; // Conversation category
    importance?: 'low' | 'medium' | 'high'; // Priority level
  };
  // Computed properties (calculated by Cosmos DB)
  isActive?: boolean; // lastActivityTimestamp > expiryThreshold
}

/**
 * Message entity for the 'messages' container
 * Stores individual chat messages within conversations
 * Partition Key: /conversationId
 * Computed Properties: contentLength, isUserMessage
 */
export interface MessageEntity extends CosmosDbEntity {
  id: string; // Unique message ID
  conversationId: string; // Conversation ID (partition key)
  sender: 'user' | 'assistant'; // Message sender type
  text: string; // Message text content (excluded from indexing)
  timestamp: string; // Message timestamp (ISO string)
  audioUrl?: string; // TTS audio URL if available (excluded from indexing)
  metadata?: {
    model?: string; // AI model used for response
    tokens?: number; // Token count for AI messages
    processingTime?: number; // Processing time in ms for AI responses
    audioData?: {
      // Audio-related metadata
      duration?: number; // Audio duration in seconds
      format?: string; // Audio format (mp3, wav, etc.)
      size?: number; // File size in bytes
    };
  };
  // Computed properties (calculated by Cosmos DB)
  contentLength?: number; // LENGTH(text)
  isUserMessage?: boolean; // sender = 'user'
}

/**
 * Analytics entity for the 'analytics' container
 * Stores usage analytics and metrics data
 * Partition Key: /date
 * Computed Properties: metricsCount, trendDirection
 */
export interface AnalyticsEntity extends CosmosDbEntity {
  id: string; // Unique analytics ID
  date: string; // Partition key - date in YYYY-MM-DD format
  userId: string; // User ID for user-specific analytics
  metricType: 'usage' | 'performance' | 'engagement' | 'error' | 'feedback'; // Type of metric
  timestamp: string; // Full timestamp (ISO string)
  metrics: {
    // Array of metrics
    name: string; // Metric name
    value: number; // Metric value
    unit?: string; // Unit of measurement
    tags?: Record<string, string>; // Additional tags
  }[];
  currentValue?: number; // Current value for trend calculation
  previousValue?: number; // Previous value for trend calculation
  aggregation?: {
    // Aggregated data
    period: 'hourly' | 'daily' | 'weekly' | 'monthly';
    sum?: number;
    average?: number;
    min?: number;
    max?: number;
    count?: number;
  };
  rawData?: Record<string, any>; // Raw data (excluded from indexing)
  createdAt: string; // Creation timestamp (ISO string)
  // Computed properties (calculated by Cosmos DB)
  metricsCount?: number; // ARRAY_LENGTH(metrics)
  trendDirection?: 'up' | 'down' | 'unchanged'; // Based on currentValue vs previousValue
}

/**
 * Query result wrapper for paginated responses
 */
export interface CosmosQueryResult<T> {
  items: T[];
  continuationToken?: string;
  requestCharge: number;
  activityId?: string;
}

/**
 * Cosmos DB operation options
 */
export interface CosmosOperationOptions {
  maxItemCount?: number; // Maximum items to return
  continuationToken?: string; // Continuation token for pagination
  consistencyLevel?:
    | 'Strong'
    | 'BoundedStaleness'
    | 'Session'
    | 'ConsistentPrefix'
    | 'Eventual';
  enableCrossPartitionQuery?: boolean; // Allow cross-partition queries
  partitionKey?: any; // Specific partition key value
}

/**
 * Cosmos DB configuration interface
 */
export interface CosmosDbConfig {
  endpoint: string; // Cosmos DB endpoint URI
  key?: string; // Primary or secondary key (optional with managed identity)
  connectionString?: string; // Connection string (alternative to endpoint/key)
  databaseName: string; // Database name
  defaultConsistencyLevel?:
    | 'Strong'
    | 'BoundedStaleness'
    | 'Session'
    | 'ConsistentPrefix'
    | 'Eventual';
}

/**
 * Container configuration
 */
export interface ContainerConfig {
  name: string; // Container name
  partitionKeyPath: string; // Partition key path (e.g., "/userId")
  maxThroughput?: number; // Maximum RU/s for autoscale
  defaultTtl?: number; // Default TTL in seconds
}

/**
 * Type guards for entity validation
 */
export const isUserEntity = (obj: any): obj is UserEntity => {
  return (
    obj &&
    typeof obj.id === 'string' &&
    typeof obj.email === 'string' &&
    typeof obj.displayName === 'string' &&
    ['free', 'premium', 'elite'].includes(obj.subscriptionTier)
  );
};

export const isConversationEntity = (obj: any): obj is ConversationEntity => {
  return (
    obj &&
    typeof obj.id === 'string' &&
    typeof obj.userId === 'string' &&
    typeof obj.title === 'string' &&
    typeof obj.messageCount === 'number'
  );
};

export const isMessageEntity = (obj: any): obj is MessageEntity => {
  return (
    obj &&
    typeof obj.id === 'string' &&
    typeof obj.conversationId === 'string' &&
    ['user', 'assistant'].includes(obj.sender) &&
    typeof obj.text === 'string'
  );
};

export const isAnalyticsEntity = (obj: any): obj is AnalyticsEntity => {
  return (
    obj &&
    typeof obj.id === 'string' &&
    typeof obj.date === 'string' &&
    typeof obj.userId === 'string' &&
    ['usage', 'performance', 'engagement', 'error', 'feedback'].includes(
      obj.metricType
    ) &&
    Array.isArray(obj.metrics)
  );
};
